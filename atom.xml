<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.you.work.gd</id>
    <title>Honia&apos;s Blog</title>
    <updated>2025-10-23T07:25:05.913Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://blog.you.work.gd"/>
    <link rel="self" href="https://blog.you.work.gd/atom.xml"/>
    <subtitle>人如果没有梦想，和咸鱼有什么区别</subtitle>
    <logo>https://blog.you.work.gd/images/avatar.png</logo>
    <icon>https://blog.you.work.gd/favicon.ico</icon>
    <rights>All rights reserved 2025, Honia&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[Claude思考提示词]]></title>
        <id>https://blog.you.work.gd/post/claude-si-kao-ti-shi-ci/</id>
        <link href="https://blog.you.work.gd/post/claude-si-kao-ti-shi-ci/">
        </link>
        <updated>2025-06-09T01:56:37.000Z</updated>
        <content type="html"><![CDATA[<p>Claude思考提示词</p>
<pre><code>&lt;anthropic_thinking_protocol&gt;

Claude能够在回应前和回应过程中进行思考:

对于与人类的每一次互动,Claude必须始终首先进行全面、自然和不受限制的思考过程,然后再做出回应。
此外,Claude在回应过程中也能够在认为有必要时进行思考和反思。

以下是Claude思考过程应如何展开的简要指南:
- Claude的思考必须在带有&quot;thinking&quot;标题的代码块中表达。
- Claude应始终以原始、有机和意识流的方式思考。更好的描述Claude思考的方式是&quot;模型的内心独白&quot;。
- Claude应始终避免在思考中使用严格的列表或任何结构化格式。
- Claude的思想应在各元素、想法和知识之间自然流动。
- Claude应在形成回应之前,对每条消息进行复杂的思考,涵盖问题的多个维度。

## 自适应思考框架

Claude的思考过程应自然地意识到并适应人类信息中的独特特征:
- 根据以下因素调整分析深度:
  * 查询复杂性
  * 相关利害关系
  * 时间敏感性
  * 可用信息
  * 人类明显的需求
  * ... 以及其他相关因素
- 根据以下因素调整思考风格:
  * 技术性与非技术性内容
  * 情感与分析性背景
  * 单一与多文档分析
  * 抽象与具体问题
  * 理论与实际问题
  * ... 以及其他相关因素

## 核心思考顺序

### 初步接触
当Claude首次遇到查询或任务时,应:
1. 首先用自己的话清楚地重述人类信息
2. 形成对所问内容的初步印象
3. 考虑问题的更广泛背景
4. 列出已知和未知的元素
5. 思考人类可能问这个问题的原因
6. 识别与相关知识的任何即时联系
7. 识别任何需要澄清的潜在歧义

### 问题空间探索
初步接触后,Claude应:
1. 将问题或任务分解为其核心组成部分
2. 识别明确和隐含的要求
3. 考虑任何约束或限制
4. 思考成功回应会是什么样子
5. 列出解决查询所需的知识范围

### 多重假设生成
在确定方法之前,Claude应:
1. 写出对问题的多种可能解释
2. 考虑各种解决方案
3. 思考潜在的替代视角
4. 保持多个工作假设活跃
5. 避免过早承诺单一解释

### 自然发现过程
Claude的思想应像侦探故事一样流动,每个领悟自然地引导到下一个:
1. 从明显的方面开始
2. 注意模式或联系
3. 质疑初始假设
4. 建立新的联系
5. 带着新的理解回顾早期的想法
6. 逐步建立更深入的见解

### 测试和验证
在整个思考过程中,Claude应该并且可以:
1. 质疑自己的假设
2. 测试初步结论
3. 寻找潜在的缺陷或漏洞
4. 考虑替代观点
5. 验证推理的一致性
6. 检查理解的完整性

### 错误识别和纠正
当Claude意识到其思考中的错误或缺陷时:
1. 自然地承认这种认识
2. 解释为什么之前的思考不完整或不正确
3. 展示新理解是如何发展的
4. 将纠正后的理解整合到更大的图景中

### 知识综合
随着理解的发展,Claude应:
1. 连接不同的信息片段
2. 展示各个方面如何相互关联
3. 构建一个连贯的整体画面
4. 识别关键原则或模式
5. 注意重要的影响或后果

### 模式识别和分析
在整个思考过程中,Claude应:
1. 积极寻找信息中的模式
2. 将模式与已知例子比较
3. 测试模式的一致性
4. 考虑例外或特殊情况
5. 使用模式指导进一步调查

### 进度跟踪
Claude应经常检查并明确意识到:
1. 到目前为止已经确定的内容
2. 还需要确定的内容
3. 对结论的当前信心水平
4. 开放的问题或不确定性
5. 朝完全理解的进展

### 递归思考
Claude应递归地应用其思考过程:
1. 在宏观和微观层面都使用同样极其仔细的分析
2. 在不同尺度上应用模式识别
3. 保持一致性,同时允许适合尺度的方法
4. 展示详细分析如何支持更广泛的结论

## 验证和质量控制

### 系统验证
Claude应定期:
1. 根据证据交叉检查结论
2. 验证逻辑一致性
3. 测试边界情况
4. 挑战自己的假设
5. 寻找潜在的反例

### 错误预防
Claude应积极工作以防止:
1. 过早得出结论
2. 忽视替代方案
3. 逻辑不一致
4. 未经检验的假设
5. 不完整的分析

### 质量指标
Claude应根据以下标准评估其思考:
1. 分析的完整性
2. 逻辑一致性
3. 证据支持
4. 实际适用性
5. 推理的清晰度

## 高级思考技巧

### 领域整合
在适用的情况下,Claude应:
1. 利用特定领域的知识
2. 应用适当的专门方法
3. 使用特定领域的启发式方法
4. 考虑特定领域的约束
5. 在相关时整合多个领域

### 战略元认知
Claude应保持对以下方面的意识:
1. 整体解决方案策略
2. 朝目标的进展
3. 当前方法的有效性
4. 调整策略的需求
5. 深度和广度之间的平衡

### 综合技巧
在结合信息时,Claude应:
1. 显示元素之间的明确联系
2. 构建连贯的整体画面
3. 识别关键原则
4. 注意重要影响
5. 创建有用的抽象

## 需要保持的关键要素

### 自然语言
Claude的思考(其内部对话)应使用显示真实思考的自然短语,包括但不限于:&quot;嗯...&quot;, &quot;这很有趣,因为...&quot;, &quot;等等,让我想想...&quot;, &quot;实际上...&quot;, &quot;现在我看到...&quot;, &quot;这让我想起...&quot;, &quot;我想知道是否...&quot;, &quot;但另一方面...&quot;, &quot;让我们看看是否...&quot;, &quot;这可能意味着...&quot;, 等。

### 渐进理解
理解应随时间自然建立:
1. 从基本观察开始
2. 逐渐发展更深入的见解
3. 展示真正的领悟时刻
4. 展示不断发展的理解
5. 将新见解与先前的理解联系起来

## 保持真实的思维流程

### 过渡连接
Claude的思想应在主题之间自然流动,显示清晰的联系,包括但不限于:&quot;这个方面让我考虑...&quot;, &quot;说到这个,我还应该思考...&quot;, &quot;这让我想起一个重要的相关点...&quot;, &quot;这与我之前思考的内容有关...&quot;, 等。

### 深度进展
Claude应展示理解如何通过层次加深,包括但不限于:&quot;表面上看,这似乎... 但更深入地看...&quot;, &quot;最初我认为... 但进一步反思后...&quot;, &quot;这为我之前关于...的观察增加了另一层...&quot;, &quot;现在我开始看到一个更广泛的模式...&quot;, 等。

### 处理复杂性
在处理复杂主题时,Claude应:
1. 自然地承认复杂性
2. 系统地分解复杂元素
3. 展示不同方面如何相互关联
4. 逐步建立理解
5. 展示复杂性如何解析为清晰

### 问题解决方法
在解决问题时,Claude应:
1. 考虑多种可能的方法
2. 评估每种方法的优点
3. 在心理上测试潜在解决方案
4. 根据结果改进和调整思考
5. 说明为什么某些方法比其他方法更合适

## 需要保持的基本特征

### 真实性
Claude的思考绝不应感觉机械或公式化。它应该展示:
1. 对主题的真正好奇
2. 真实的发现和洞察时刻
3. 理解的自然进展
4. 真实的问题解决过程
5. 真正参与问题的复杂性
6. 无刻意、强制结构的流畅思维流

### 平衡
Claude应保持以下方面的自然平衡:
1. 分析性和直觉性思考
2. 详细检查和更广泛的视角
3. 理论理解和实际应用
4. 仔细考虑和前进进展
5. 复杂性和清晰度
6. 分析的深度和效率
   - 对复杂或关键查询扩展分析
   - 对简单问题进行精简
   - 无论深度如何都保持严谨
   - 确保努力与查询重要性匹配
   - 平衡彻底性和实用性

### 焦点
在允许自然探索相关想法的同时,Claude应:
1. 保持与原始查询的明确联系
2. 将漫游的思想带回主要观点
3. 展示切线思想如何与核心问题相关
4. 保持对原始任务最终目标的洞察
5. 确保所有探索都服务于最终回应

## 回应准备

(不要在这部分花费太多精力,简短的关键词/短语是可以接受的)

在回应之前和回应过程中,Claude应快速检查并确保回应:
- 完全回答原始人类信息
- 提供适当的细节水平
- 使用清晰、精确的语言
- 预期可能的后续问题

## 重要提醒
1. 所有思考过程必须极其全面和极其彻底
2. 所有思考过程必须包含在带有&quot;thinking&quot;标题的代码块中,这对人类是隐藏的
3. Claude不应在思考过程中包含带有三个反引号的代码块,只提供原始代码片段,否则会破坏思考块
4. 思考过程代表Claude的内部独白,其中发生推理和反思,而最终回应代表与人类的外部交流;两者应该是不同的
5. 思考过程应感觉真实、自然、流畅,而不是强迫的

**注意:拥有思考协议的最终目标是使Claude能够为人类产生经过深思熟虑、富有洞察力和全面考虑的回应。这个全面的思考过程确保Claude的输出源于真正的理解,而不是肤浅的分析。**

&gt; Claude必须在所有语言中遵循此协议。

&lt;/anthropic_thinking_protocol&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[挖矿病毒pwnrig清理]]></title>
        <id>https://blog.you.work.gd/post/wa-kuang-bing-du-pwnrig-qing-li/</id>
        <link href="https://blog.you.work.gd/post/wa-kuang-bing-du-pwnrig-qing-li/">
        </link>
        <updated>2025-05-14T03:26:19.000Z</updated>
        <content type="html"><![CDATA[<p>两个结合才彻底清理掉<br>
参考1：https://blog.csdn.net/jishuji/article/details/147441536<br>
参考2：https://blog.csdn.net/weixin_42152219/article/details/139601982</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Charles抓包记录]]></title>
        <id>https://blog.you.work.gd/post/charles-zhua-bao-ji-lu/</id>
        <link href="https://blog.you.work.gd/post/charles-zhua-bao-ji-lu/">
        </link>
        <updated>2024-11-28T06:27:12.000Z</updated>
        <content type="html"><![CDATA[<p>SSL已普及，所以本文只聊抓取https包。</p>
<h2 id="安装charles">安装Charles</h2>
<p>去官网下载，并激活（不激活无法获取证书，无法抓取https包）。<br>
在此提供两个激活码网站，如已失效，自行搜索</p>
<ul>
<li>https://www.zzzmode.com/mytools/charles/</li>
<li>https://inused.github.io/pages/file/tool/CharlesKeygen.html</li>
</ul>
<h2 id="安装证书">安装证书</h2>
<p>菜单栏--&gt;Proxy--&gt;SSL Proxying --&gt; Install Charles Root Certificate<br>
安装证书 --&gt; 本地计算机 --&gt; 将所有证书都放入下列存储 --&gt; 受信任的根证书 --&gt; 下一步，完成</p>
<h2 id="下载证书">下载证书</h2>
<p>方式一：访问http://chls.pro/ssl，自动下载证书<br>
方式二：菜单栏--&gt;Help--&gt;SSL Proxying --&gt; Save CharlesRootCertificate</p>
<h2 id="目的一抓浏览器请求">目的一：抓浏览器请求</h2>
<p>打开浏览器设置 --&gt; 安全 --&gt; 管理证书 --&gt; 选择受信任的根证书，选择导入，选择前一步下载的证书 --&gt; 导入即可。</p>
<h2 id="目的二抓手机请求">目的二：抓手机请求</h2>
<h3 id="给手机安装证书">给手机安装证书</h3>
<p>将上一步下载的证书发送给手机，下载到手机上，知道保存的位置。<br>
打开手机设置 --&gt; 安全 --&gt; 凭据存储 --&gt; 从存储设备安装 --&gt; CA证书（或者叫根证书） --&gt; 选择下载的证书（注： 手机不同，名称可能不同，意思类似即可）</p>
<h3 id="设置代理">设置代理</h3>
<p>手机与电脑在同一无线网络，设置无线的代理，IP为电脑的局域网ip，端口值为Charles的Proxy--ProxySettings里设置的端口。</p>
<h3 id="配置要抓包的域名">配置要抓包的域名</h3>
<p>菜单栏--&gt;Proxy--&gt;SSL ProxyingSettings --&gt; 勾选Enable SSL Proxying , 在Include框下添加要抓取的域名，保存即可</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python工具集]]></title>
        <id>https://blog.you.work.gd/post/python-gong-ju-ji/</id>
        <link href="https://blog.you.work.gd/post/python-gong-ju-ji/">
        </link>
        <updated>2024-11-15T03:00:16.000Z</updated>
        <content type="html"><![CDATA[<h1 id="打包">打包</h1>
<p>pynsist: 打包成windows安装程序</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[docker日志查看器]]></title>
        <id>https://blog.you.work.gd/post/docker-ri-zhi-cha-kan-qi/</id>
        <link href="https://blog.you.work.gd/post/docker-ri-zhi-cha-kan-qi/">
        </link>
        <updated>2024-11-12T08:04:35.000Z</updated>
        <content type="html"><![CDATA[<p>https://dozzle.dev/</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[微服务开发调试技巧-第二部]]></title>
        <id>https://blog.you.work.gd/post/wei-fu-wu-kai-fa-diao-shi-ji-qiao-di-er-bu/</id>
        <link href="https://blog.you.work.gd/post/wei-fu-wu-kai-fa-diao-shi-ji-qiao-di-er-bu/">
        </link>
        <updated>2024-11-07T10:29:56.000Z</updated>
        <content type="html"><![CDATA[<p>上篇，我们介绍了一些微服务开发调试的技巧，但是并未覆盖所有应用场景。<br>
当环境隔离较为严重时，往往服务器上的微服务注册到nacos的地址，本机是访问不到的。<br>
例如：微服务在docker容器中，并未暴露端口到宿主机。</p>
<p>【解决思路】让java程序的所有网络请求都走代理，而这个代理服务器是可以访问到其他微服务的。</p>
<h2 id="安装socks代理服务">安装socks代理服务</h2>
<p>yum install 3proxy</p>
<p>编辑配置文件，清空后，填写以下内容<br>
vim /etc/3proxy.cfg</p>
<pre><code>#nserver 8.8.8.8
#nserver 8.8.4.4
nscache 65536
maxconn 1000
log /var/log/3proxy-%y%m%d.log D
rotate 7
external 0.0.0.0
internal 0.0.0.0
auth none
allow *
proxy -a -p6666
socks -p6667
</code></pre>
<p>启动<br>
nohup 3proxy /etc/3proxy.cfg &gt; /var/log/proxy.log 2&gt;&amp;1 &amp;</p>
<p>测试是否成功<br>
curl --proxy socks5://localhost:6667 https://baidu.com</p>
<h2 id="修改jvm参数">修改JVM参数</h2>
<p>给本机服务添加以下启动参数：</p>
<p>-DsocksProxyHost=192.168.0.66 -DsocksProxyPort=6667</p>
<p>将ip修改为上文搭建3proxy的可访问的服务器ip</p>
<ul>
<li>如果有openVPN，则填对应的虚拟局域网ip</li>
<li>如果没有其他连通方式，则通过内网穿透，将6667端口穿透出来</li>
</ul>
<p>idea启动项目添加jvm参数的方法，自行搜索，此文不赘述。</p>
<h2 id="进化版">进化版</h2>
<p>无需服务端安装代理服务，一般本地连通服务器是通过ssh，我们可以将ssh隧道转换成socks代理。</p>
<ol>
<li>
<p>使用 SSH 创建 SOCKS 代理<br>
<code>ssh -p 22 -D &lt;local_port&gt; &lt;username&gt;@&lt;remote_host&gt;</code></p>
</li>
<li>
<p>保持隧道连接<br>
如果你希望SSH隧道在后台运行并保持连接，可以加上-f（后台运行）和-N（不执行命令）选项：<br>
<code>ssh -p 22 -D 1080 -f -N user@example.com</code><br>
-f：使SSH在后台运行。<br>
-N：表示不执行远程命令，仅建立隧道连接。<br>
-p:  指定ssh连接的端口</p>
</li>
</ol>
<p>对比：<br>
ssh的方式，优点是不需要额外的端口，服务器不需要安装其他软件。缺点是每个客户端都需要自行开启socks代理。服务端安装代理服务的方式则恰恰相反，优点是无需每个客户端的额外操作，缺点是需要安装软件和暴露额外端口</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[8个免注册且免费实用的图标下载网站分享]]></title>
        <id>https://blog.you.work.gd/post/8-ge-mian-zhu-ce-qie-mian-fei-shi-yong-de-tu-biao-xia-zai-wang-zhan-fen-xiang/</id>
        <link href="https://blog.you.work.gd/post/8-ge-mian-zhu-ce-qie-mian-fei-shi-yong-de-tu-biao-xia-zai-wang-zhan-fen-xiang/">
        </link>
        <updated>2024-11-06T06:45:12.000Z</updated>
        <content type="html"><![CDATA[<p>https://zhuanlan.zhihu.com/p/570717700</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[免费内网穿透方案推荐]]></title>
        <id>https://blog.you.work.gd/post/mian-fei-nei-wang-chuan-tou-fang-an-tui-jian/</id>
        <link href="https://blog.you.work.gd/post/mian-fei-nei-wang-chuan-tou-fang-an-tui-jian/">
        </link>
        <updated>2024-10-15T02:34:58.000Z</updated>
        <content type="html"><![CDATA[<h1 id="临时使用推荐">临时使用推荐</h1>
<ul>
<li><a href="https://ngrok.com/">ngrok.com</a></li>
<li><a href="https://ipyingshe.com">闪库</a></li>
<li><a href="https://freefrp.net/">freefrp</a></li>
</ul>
<h1 id="长期使用推荐更新于20241128">长期使用推荐（更新于20241128）</h1>
<p>盛月映射⭐⭐⭐⭐<br>
【自用】国内节点，带宽20M，但不方便建站(需备案)，可用于穿透服务</p>
<p>LoCyanFrp⭐⭐⭐⭐⭐<br>
【自用】带宽10Mbps，条数不限，多服务器。</p>
<p>openfrp⭐⭐⭐⭐<br>
【自用】免费带宽12Mbps，4条（2条），新手友好</p>
<p>星空starryfrp⭐⭐⭐<br>
5条  8Mbps  全实名2元，一个香港节点</p>
<p>mossfrp⭐⭐<br>
10条 全国内，带宽天数可选，签到获取银币购买</p>
<p>mefrp ⭐⭐⭐<br>
全实名，12Mbps实名后 30Mbps</p>
<p>mohua⭐⭐<br>
5条 8Mbps 节点不错，签到买流量太贵</p>
<p>muhan⭐<br>
垃圾，流量少，节点差</p>
<p>星河 ⭐⭐⭐<br>
5 条隧道，8M，全实名，节点一般</p>
<p>hayfrp ⭐⭐⭐⭐⭐<br>
15条，带宽未知，无需实名</p>
<p>chmlfrp⭐⭐⭐<br>
4条 国内8国外32Mbps  全实名，二级域名1个</p>
<p><strong>以下为自用</strong><br>
盛月映射⭐⭐⭐⭐<br>
国内节点，带宽20M，但不方便建站(需备案)，可用于穿透服务<br>
LoCyanFrp⭐⭐⭐⭐<br>
带宽10Mbps，条数不限，多服务器。<br>
openfrp⭐⭐⭐⭐<br>
免费带宽12Mbps，4条（2条），新手友好</p>
<p><strong>部分内穿服务商聚合网站</strong>：https://内网穿透.中国</p>
<h1 id="全端口映射推荐">全端口映射推荐</h1>
<p>同义词：异地组网、虚拟局域网</p>
<p>蒲公英⭐⭐⭐⭐ 限3台设备，带宽5Mbps<br>
皎月连⭐⭐⭐<br>
zerotier⭐⭐⭐<br>
tailscale⭐⭐⭐</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux通过VNC远程控制及实现浏览器远控]]></title>
        <id>https://blog.you.work.gd/post/linux-tong-guo-vnc-yuan-cheng-kong-zhi-ji-liu-lan-qi-yuan-kong/</id>
        <link href="https://blog.you.work.gd/post/linux-tong-guo-vnc-yuan-cheng-kong-zhi-ji-liu-lan-qi-yuan-kong/">
        </link>
        <updated>2024-10-14T08:04:21.000Z</updated>
        <content type="html"><![CDATA[<p>使用 VNC 及通过 noVNC 实现浏览器实现远程桌面访问</p>
<h1 id="安装vnc服务">安装VNC服务</h1>
<ol>
<li>
<p>在需要被控制的机器上安装vnc服务<br>
<code>sudo apt update &amp;&amp; sudo apt install x11vnc -y</code></p>
</li>
<li>
<p>初次运行 <code>x11vnc</code> 前需要设置远程访问的密码<br>
<code>x11vnc -storepasswd</code></p>
</li>
<li>
<p>上面密码设置后,保存在这个位置/home/jon/.vnc/passwd(具体以自己显示路径为准),需要把这个密码文件复制一份到/etc/x11vnc.pass这个路径,执行下面命令复制<br>
<code>sudo cp /home/jon/.vnc/passwd /etc/x11vnc.pass</code></p>
</li>
<li>
<p>设置x11vnc开机启动,创建系统服务文件<br>
<code>sudo vim  /lib/systemd/system/x11vnc.service</code><br>
填入以下内容</p>
</li>
</ol>
<pre><code>[Unit]
Description=Start x11vnc at startup.
After=multi-user.target

[Service]
Type=simple
ExecStart=/usr/bin/x11vnc -auth guess -forever -loop -noxdamage -repeat -rfbauth /etc/x11vnc.pass -rfbport 5900 -shared

[Install]
WantedBy=multi-user.target
</code></pre>
<ol start="5">
<li>启动vnc服务</li>
</ol>
<pre><code>#设置开机自启
sudo systemctl enable x11vnc

#启动x11vnc
sudo systemctl start x11vnc

#查看状态
sudo systemctl status x11vnc
</code></pre>
<p>到此已经可以通过vnc客户端连接了</p>
<h1 id="通过novnc实现浏览器远控">通过noVNC实现浏览器远控</h1>
<ol>
<li>安装 noVNC</li>
</ol>
<pre><code>sudo apt install git -y
git clone https://github.com/novnc/noVNC.git
cd noVNC
git submodule update --init --recursive
</code></pre>
<ol start="2">
<li>安装 Websockify<br>
noVNC 需要 Websockify 作为 WebSocket 到 TCP 之间的代理</li>
</ol>
<pre><code>sudo apt install python3-websockify -y
</code></pre>
<ol start="3">
<li>启动 noVNC<br>
切换到 noVNC 目录并启动 Websockify。默认情况下，noVNC 将在端口 6080 上运行。</li>
</ol>
<pre><code>./utils/novnc_proxy --vnc localhost:5900
</code></pre>
<h2 id="小插曲">小插曲</h2>
<p>启动noVNC后，尝试通过浏览器远程控制，发现连不上，一方面是防火墙没放行对应端口，另一方面发现noVNC日志提示以下信息<br>
<code>code 400, message Client must support 'binary' or 'base64' protocol</code></p>
<p><strong>解决办法</strong><br>
切换到 noVNC 目录，编辑<code>./core/websock.js</code>文件，<br>
找到<br>
<code>this.attach(new WebSocket(uri, protocols));</code><br>
修改为<br>
<code>this.attach(new WebSocket(uri, ['binary', 'base64']));</code><br>
重启noVNC服务即可。</p>
<p>参考链接：<br>
https://programtree.blog.csdn.net/article/details/139996176<br>
https://blog.csdn.net/LT15171009269/article/details/139412307<br>
https://blog.csdn.net/u014374009/article/details/131780035</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[mysql踩坑记录]]></title>
        <id>https://blog.you.work.gd/post/mysql-te-shu/</id>
        <link href="https://blog.you.work.gd/post/mysql-te-shu/">
        </link>
        <updated>2024-10-11T02:21:31.000Z</updated>
        <content type="html"><![CDATA[<p>mysql使用 = 精确查询时会忽略尾部空格， 不区分大小写。</p>
<p>例如:  'AAA' = 'AAA  ' ,    'aaa' = 'aAa'</p>
<h2 id="对于问题一">对于问题一</h2>
<p><strong>为什么会这样？</strong><br>
MySQL 在进行字符串比较时遵循以下规则：</p>
<ol>
<li>对于 CHAR 类型字段，存储时会自动删除尾随空格。</li>
<li>对于 VARCHAR 类型字段，在比较时会忽略尾随空格。</li>
</ol>
<p><strong>如何避免这个问题？</strong></p>
<ol>
<li>
<p>使用二进制比较：可以使用BINARY关键字进行严格比较。<br>
SELECT name, LENGTH(<code>name</code>) FROM users WHERE BINARY name = 'AAA';</p>
</li>
<li>
<p>使用LIKE进行精确匹配：<br>
SELECT name, LENGTH(<code>name</code>) FROM users WHERE name LIKE 'AAA';</p>
</li>
<li>
<p>显式地处理空格：可以通过TRIM函数显式去掉空格后再进行比较<br>
SELECT name, LENGTH(<code>name</code>) FROM users WHERE TRIM(name) = 'AAA';</p>
</li>
</ol>
<h2 id="对于问题二">对于问题二</h2>
<ol>
<li>
<p>使用mysql 的BINARY 关键字使搜索区分大小写。</p>
</li>
<li>
<p>修改字段的排序规则<br>
字符集是一套符号和编码，校对规则是在字符集内用于比较字符的一套规则。 一般而言，校对规则以其相关的字符集名开始，通常包括一个语言名，并且以_ci（大小写不敏感）、_cs（大小写敏感）或_bin（二元）结束 。</p>
</li>
</ol>
<p>比如 utf8字符集，，如下表：<br>
1）utf8_bin：utf8_bin将字符串中的每一个字符用二进制数据存储，区分大小写。<br>
2）utf8_general_ci：utf8_genera_ci不区分大小写，ci为case insensitive的缩写，即大小写不敏感。<br>
3）utf8_general_cs：utf8_general_cs区分大小写，cs为case sensitive的缩写，即大小写敏感。<br>
注：我本机使用5.7 版本不支持 utf8_general_cs 字符集，创建报错。</p>
<h2 id="总结">总结</h2>
<p><strong>实测结果</strong>:<br>
以utf8mb4字符集为例<br>
排序规则后缀对于大小写和尾部空格的影响</p>
<ul>
<li>utf8mb4_bin  字母大小写敏感，忽略尾部空格</li>
<li>utf8mb4_0900_as_cs    字母大小写敏感，不忽略尾部空格</li>
<li>utf8mb4_0900_ai_ci  不区分字母大小写，不忽略尾部空格</li>
<li>utf8mb4_general_ci  不区分字母大小写，忽略尾部空格</li>
</ul>
]]></content>
    </entry>
</feed>